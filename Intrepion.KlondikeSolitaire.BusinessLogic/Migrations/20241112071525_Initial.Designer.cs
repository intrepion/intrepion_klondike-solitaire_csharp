// <auto-generated />
using System;
using Intrepion.KlondikeSolitaire.BusinessLogic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intrepion.KlondikeSolitaire.BusinessLogic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241112071525_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetRolesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetRoleClaimsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetUsersHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetUserClaimsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetUserLoginsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetUserRolesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.ToTable("AspNetUserTokens", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AspNetUserTokensHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("RankIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuitIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("RankIdId");

                    b.HasIndex("SuitIdId");

                    b.ToTable("Cards", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CardsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardFoundation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoundationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("CardId");

                    b.HasIndex("FoundationId");

                    b.ToTable("CardFoundations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CardFoundationsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CardIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("PuzzleIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("CardIdId");

                    b.HasIndex("GameIdId");

                    b.HasIndex("PuzzleIdId");

                    b.ToTable("CardStocks", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CardStocksHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardTableau", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CardIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("TableauIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("CardIdId");

                    b.HasIndex("TableauIdId");

                    b.ToTable("CardTableaus", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CardTableausHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardWaste", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CardIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ordering")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("PuzzleIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("CardIdId");

                    b.HasIndex("GameIdId");

                    b.HasIndex("PuzzleIdId");

                    b.ToTable("CardWastes", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CardWastesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Foundation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PileIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("PuzzleIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuitIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("GameIdId");

                    b.HasIndex("PuzzleIdId");

                    b.HasIndex("SuitIdId");

                    b.ToTable("Foundations", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("FoundationsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("PlayerIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PuzzleIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StatusIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("PlayerIdId");

                    b.HasIndex("PuzzleIdId");

                    b.HasIndex("StatusIdId");

                    b.ToTable("Games", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("GamesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Move", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Card1IdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Card2IdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Card3IdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FromPileIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("FromPileTypeIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MoveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("ToPileIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("ToPileTypeIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("Card1IdId");

                    b.HasIndex("Card2IdId");

                    b.HasIndex("Card3IdId");

                    b.HasIndex("FromPileTypeIdId");

                    b.HasIndex("GameIdId");

                    b.HasIndex("ToPileTypeIdId");

                    b.ToTable("Moves", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("MovesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.PileType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.ToTable("PileTypes", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PileTypesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserIdId");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.ToTable("Players", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PlayersHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatorIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("CreatorIdId");

                    b.ToTable("Puzzles", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("PuzzlesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.ToTable("Ranks", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("RanksHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.ToTable("Statuses", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("StatusesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Suit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.ToTable("Suits", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SuitsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Tableau", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameIdId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int>("PileIndex")
                        .HasColumnType("int");

                    b.Property<Guid?>("PuzzleIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserUpdatedById");

                    b.HasIndex("GameIdId");

                    b.HasIndex("PuzzleIdId");

                    b.ToTable("Tableaus", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TableausHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRole", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationRoles")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationRoleClaims")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationUsers")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationUserClaims")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationUserLogins")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationUserRoles")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedApplicationUserTokens")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedCards")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Rank", "RankId")
                        .WithMany("Cards")
                        .HasForeignKey("RankIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Suit", "SuitId")
                        .WithMany("Cards")
                        .HasForeignKey("SuitIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("RankId");

                    b.Navigation("SuitId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardFoundation", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedCardFoundations")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "Card")
                        .WithMany("CardFoundations")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Foundation", "Foundation")
                        .WithMany("CardFoundations")
                        .HasForeignKey("FoundationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("Card");

                    b.Navigation("Foundation");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardStock", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedCardStocks")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "CardId")
                        .WithMany("CardStocks")
                        .HasForeignKey("CardIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", "GameId")
                        .WithMany("CardStocks")
                        .HasForeignKey("GameIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", "PuzzleId")
                        .WithMany("CardStocks")
                        .HasForeignKey("PuzzleIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("CardId");

                    b.Navigation("GameId");

                    b.Navigation("PuzzleId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardTableau", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedCardTableaus")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "CardId")
                        .WithMany("CardTableaus")
                        .HasForeignKey("CardIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Tableau", "TableauId")
                        .WithMany("CardTableaus")
                        .HasForeignKey("TableauIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("CardId");

                    b.Navigation("TableauId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.CardWaste", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedCardWastes")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "CardId")
                        .WithMany("CardWastes")
                        .HasForeignKey("CardIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", "GameId")
                        .WithMany("CardWastes")
                        .HasForeignKey("GameIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", "PuzzleId")
                        .WithMany("CardWastes")
                        .HasForeignKey("PuzzleIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("CardId");

                    b.Navigation("GameId");

                    b.Navigation("PuzzleId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Foundation", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedFoundations")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", "GameId")
                        .WithMany("Foundations")
                        .HasForeignKey("GameIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", "PuzzleId")
                        .WithMany("Foundations")
                        .HasForeignKey("PuzzleIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Suit", "SuitId")
                        .WithMany("Foundations")
                        .HasForeignKey("SuitIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("GameId");

                    b.Navigation("PuzzleId");

                    b.Navigation("SuitId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedGames")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Player", "PlayerId")
                        .WithMany("Games")
                        .HasForeignKey("PlayerIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", "PuzzleId")
                        .WithMany("Games")
                        .HasForeignKey("PuzzleIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Status", "StatusId")
                        .WithMany("Games")
                        .HasForeignKey("StatusIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("PlayerId");

                    b.Navigation("PuzzleId");

                    b.Navigation("StatusId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Move", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedMoves")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "Card1Id")
                        .WithMany("MovesAsCard1")
                        .HasForeignKey("Card1IdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "Card2Id")
                        .WithMany("MovesAsCard2")
                        .HasForeignKey("Card2IdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", "Card3Id")
                        .WithMany("MovesAsCard3")
                        .HasForeignKey("Card3IdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.PileType", "FromPileTypeId")
                        .WithMany("MovesFromPileType")
                        .HasForeignKey("FromPileTypeIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", "GameId")
                        .WithMany("Moves")
                        .HasForeignKey("GameIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.PileType", "ToPileTypeId")
                        .WithMany("MovesToPileType")
                        .HasForeignKey("ToPileTypeIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("Card1Id");

                    b.Navigation("Card2Id");

                    b.Navigation("Card3Id");

                    b.Navigation("FromPileTypeId");

                    b.Navigation("GameId");

                    b.Navigation("ToPileTypeId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.PileType", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedPileTypes")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Player", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserId")
                        .WithMany("Player")
                        .HasForeignKey("ApplicationUserIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedPlayers")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserId");

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedPuzzles")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Player", "CreatorId")
                        .WithMany("Puzzles")
                        .HasForeignKey("CreatorIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("CreatorId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Rank", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedRanks")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Status", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedStatuses")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Suit", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedSuits")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Tableau", b =>
                {
                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", "ApplicationUserUpdatedBy")
                        .WithMany("UpdatedTableaus")
                        .HasForeignKey("ApplicationUserUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", "GameId")
                        .WithMany("Tableaus")
                        .HasForeignKey("GameIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", "PuzzleId")
                        .WithMany("Tableaus")
                        .HasForeignKey("PuzzleIdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApplicationUserUpdatedBy");

                    b.Navigation("GameId");

                    b.Navigation("PuzzleId");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRoles");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRoles");

                    b.Navigation("Player");

                    b.Navigation("UpdatedApplicationRoleClaims");

                    b.Navigation("UpdatedApplicationRoles");

                    b.Navigation("UpdatedApplicationUserClaims");

                    b.Navigation("UpdatedApplicationUserLogins");

                    b.Navigation("UpdatedApplicationUserRoles");

                    b.Navigation("UpdatedApplicationUserTokens");

                    b.Navigation("UpdatedApplicationUsers");

                    b.Navigation("UpdatedCardFoundations");

                    b.Navigation("UpdatedCardStocks");

                    b.Navigation("UpdatedCardTableaus");

                    b.Navigation("UpdatedCardWastes");

                    b.Navigation("UpdatedCards");

                    b.Navigation("UpdatedFoundations");

                    b.Navigation("UpdatedGames");

                    b.Navigation("UpdatedMoves");

                    b.Navigation("UpdatedPileTypes");

                    b.Navigation("UpdatedPlayers");

                    b.Navigation("UpdatedPuzzles");

                    b.Navigation("UpdatedRanks");

                    b.Navigation("UpdatedStatuses");

                    b.Navigation("UpdatedSuits");

                    b.Navigation("UpdatedTableaus");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Card", b =>
                {
                    b.Navigation("CardFoundations");

                    b.Navigation("CardStocks");

                    b.Navigation("CardTableaus");

                    b.Navigation("CardWastes");

                    b.Navigation("MovesAsCard1");

                    b.Navigation("MovesAsCard2");

                    b.Navigation("MovesAsCard3");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Foundation", b =>
                {
                    b.Navigation("CardFoundations");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Game", b =>
                {
                    b.Navigation("CardStocks");

                    b.Navigation("CardWastes");

                    b.Navigation("Foundations");

                    b.Navigation("Moves");

                    b.Navigation("Tableaus");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.PileType", b =>
                {
                    b.Navigation("MovesFromPileType");

                    b.Navigation("MovesToPileType");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Player", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Puzzles");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Puzzle", b =>
                {
                    b.Navigation("CardStocks");

                    b.Navigation("CardWastes");

                    b.Navigation("Foundations");

                    b.Navigation("Games");

                    b.Navigation("Tableaus");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Rank", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Status", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Suit", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Foundations");
                });

            modelBuilder.Entity("Intrepion.KlondikeSolitaire.BusinessLogic.Entities.Tableau", b =>
                {
                    b.Navigation("CardTableaus");
                });
#pragma warning restore 612, 618
        }
    }
}
