@inject ICardTableauFilters Filters

@if (CurrentCardTableau is not null)
{
    <div class="row CardTableau-detail">
        <div class="col-2 text-right">
            <a title="Edit" href="admin/UrlNamePlaceholder/edit/@CurrentCardTableau.Id" style="text-decoration:none">
                &nbsp;üìù&nbsp;
            </a>
            @if (CanDelete)
            {
                <span @onclick="DeleteRequestAsync"
                      title="Delete" class="clickable red">‚ùå</span>
            }
            else
            {
                <span>&nbsp;</span>
            }
            &nbsp;
        </div>

        <div class="col-3">
            <a href="@ViewLink" alt="View Details"
               title="View Details">
                @CurrentCardTableau.Id
            </a>
        </div>

        @if (!DeleteConfirmation)
        {
            @* RowColumnCodePlaceholder *@
        }
        else
        {
            <div class="col-9">
                <DeletePrompt Confirmation="ConfirmAsync" />
            </div>
        }
    </div>
}

@code {
    private CardTableau _currentCardTableau = new CardTableau();

    // CardTableau being rendered.
    [Parameter]
    public CardTableau CurrentCardTableau
    {
        get => _currentCardTableau;
        set
        {
            if (value is not null && !value.Equals(_currentCardTableau))
            {
                _currentCardTableau = value;
                DeleteConfirmation = false;
            }
        }
    }

    // Event to raise when a HumanNamePlaceholder delete is requested.
    [Parameter]
    public EventCallback DeleteCardTableau { get; set; }

    // Overall wrapper of functionality.
    [CascadingParameter]
    public GridWrapper? Wrapper { get; set; }

    // Returns True if conditions for delete are met.
    private bool CanDelete =>
        !DeleteConfirmation && (Wrapper?.DeleteRequestId.Equals(Guid.Empty) == true || Wrapper?.DeleteRequestId.Equals(CurrentCardTableau?.Id) == true);

    // Navigate to view.
    private string ViewLink => $"admin/UrlNamePlaceholder/view/{CurrentCardTableau?.Id}";

    // Confirm the delete.
    private bool DeleteConfirmation { get; set; }

    // Called based on confirmation.
    // confirmed: True when confirmed.
    private async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;

            if (Wrapper is not null)
            {
                await Wrapper.DeleteRequested.InvokeAsync(Guid.Empty);
            }
        }
    }

    /// Set delete to true.
    private async Task DeleteRequestAsync()
    {
        if (Wrapper?.DeleteRequestId.Equals(Guid.Empty) == true)
        {
            DeleteConfirmation = true;
            await Wrapper.DeleteRequested.InvokeAsync(CurrentCardTableau.Id);
        }
    }

    // Deletes the CardTableau.
    private Task DeleteAsync() => DeleteCardTableau.InvokeAsync(this);
}
