<h1>@Mode Move</h1>

<hr />
@if (Move is not null)
{
    <EditForm Model="Move" OnInvalidSubmit="(async () => await HandleSubmitAsync(false))" OnValidSubmit="(async () => await HandleSubmitAsync(true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h2>From Pile Index</h2>
        <p>
            <label>
                From Pile Index:
                <InputNumber @bind-Value="Move.FromPileIndex" @oninput="HandleFromPileIndexChange"/>
            </label>
        </p>
        <h2>Move Time</h2>
        <p>
            <label>
                Move Time:
                <InputDate @bind-Value="Move.MoveTime" @oninput="HandleMoveTimeChange"/>
            </label>
        </p>
        <h2>To Pile Index</h2>
        <p>
            <label>
                To Pile Index:
                <InputNumber @bind-Value="Move.ToPileIndex" @oninput="HandleToPileIndexChange"/>
            </label>
        </p>
        @* PropertyFormCodePlaceholder *@

        <br />
        <button type="button" disabled="@Busy" class="btn btn-warning" @onclick="CancelAsync">
            Cancel
        </button>&nbsp;
        <button disabled="@Busy" type="submit" class="btn btn-primary">
            Submit
        </button>
    </EditForm>
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Move to upsert.
    [Parameter]
    public Move? Move { get; set; }

    // The database version of Move if a concurrency issue.
    [Parameter]
    public Move? DbMove { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    // Ask to cancel.
    private async Task CancelAsync() => await CancelRequest.InvokeAsync(null);

    // Handle form submission request.
    // isValid: True when field validation passed.
    private async Task HandleSubmitAsync(bool isValid) => await ValidationResult.InvokeAsync(isValid);

    private void HandleFromPileIndexChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeFromPileIndexPlaceholder
    }

    private void HandleMoveTimeChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeMoveTimePlaceholder
    }

    private void HandleToPileIndexChange(ChangeEventArgs changeEventArgs)
    {
        // NormalizedCodeToPileIndexPlaceholder
    }

    // HandleChangeCodePlaceholder
}
